Each call to memalloc, meminit, and memfree will call a function which contains the meat of each of these tasks. The actualy meminit, memalloc, and memfree functions will mostly just select which of the corresponding functions to call depending on the mode. We will have an array of handles and an array of modes which will be in parity (ex. handles[17] will be mode mode[17]). This is because memalloc() is not passed mode as an argument.


The buddy allocator is going to use a binary tree structure to store pointers to free blocks. Each tree will only have one contigous memory segment. Each node in the tree will point to different offsets within the memory segment, partitioning the tree.

Freeing and coalescing the nodes will take place in the same function. As you go traverse the tree to find your freeable node, the function will check at each node if the node needs to be coalesced. If so, it will be marked as coalescable, and will be freed upon the next call to free.

Buddy Allocator

  int meminit(long n_bytes, unsigned flags, int parm1, int *parm2)
    If n_bytes is not power of 2 && (flags==0x1)
      return error
    else we will init
      set pointers to denote entire memory segment
      initialize one big block to not in use
      
  void *memalloc (int handle, long n_bytes) 
    if n_bytes is not power of 2
      return error
    for each block in bitmap
      if buddy in use && will fit
        set region in use
        return block ptr
      else
        memalloc(handle, 2^(log2(bytes)+1))   //check again for larger space
  
  void memfree (void *region) 
    if regions buddy is free
      parent = region + buddy
      parent = free
    else
      memfree(2^log2(bytes)+1)    //free next power of 2 up
      
      

List based handlers will rely on a linear bitmap, probably a 2d array. Each type an allocation is made, 8 bytes will be reserved before the start of the memory address returned by memalloc(). These 8 bytes will signify the length of the following segment, to be used for benchmarking, and for telling memfree() how much memory to free after the start of the pointer passed to it.

Freeing will consist of going through each bitmap entry at and after the memory address given, until we have reached the size of the segment, given to us by accessing 8 bytes before the start of the segment.


List Based

  int meminit(long n_bytes, unsigned flags, int parm1, int *parm2)
    check flags
    set pointers to denote entire memory segment
    
    
    
  void *memalloc (int handle, long n_bytes)
    call respective allocation mode handler
    allocate result of allocation mode handler
    
    
  mode handlers
  
  unsigned best_fit(long n_bytes)   //returns a pointer to a free block
    for each block:
      if block > n_bytes && block < best
        best = block
    return block
    
  unsigned first_fit(long n_bytes)
    for each block:
      if block >= n_bytes
        return block
  
  unsigned next_fit(long n_bytes)
    for each block:
      if block >= n_bytes
        global ptr = block
      return block
      
  unsigned random_fit(long nbytes)
    selected_block = rand()%blocks
      where block is a block larger than or equal to n_bytes
